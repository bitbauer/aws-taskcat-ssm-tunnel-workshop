AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template sets up a VPC and ec2 instance and rds for the purposes of
  demonstrating connecting to instances in private subnets using Session
  Manager.
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  AvailabilityZones:
    Description: >-
      List of Availability Zones to use for the subnets in the VPC. Only two
      Availability Zones are used for this deployment, and the logical order of
      your selections is preserved.
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  KeyPairName:
    Description: >-
      Name of an existing public/private key pair, which allows you to securely
      connect to your instance after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
  PrivateSubnet1CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public (DMZ) subnet 1 located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public (DMZ) subnet 2 located in Availability Zone 2.
    Type: String
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
    Type: String
  DBUser:
    Default: master
    Description: Master username for DB
    Type: String
  DBPassword:
    Default: nopassword
    Description: Master password for DB
    Type: String
Resources:
  EC2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2SSMRole
  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub': >-
          https://aws-quickstart.s3.amazonaws.com/quickstart-aws-vpc/templates/aws-vpc.template
      Parameters:
        AvailabilityZones:
          'Fn::Join':
            - ','
            - Ref: AvailabilityZones
        NumberOfAZs: '2'
        PrivateSubnet1ACIDR:
          Ref: PrivateSubnet1CIDR
        PrivateSubnet2ACIDR:
          Ref: PrivateSubnet2CIDR
        PublicSubnet1CIDR:
          Ref: PublicSubnet1CIDR
        PublicSubnet2CIDR:
          Ref: PublicSubnet2CIDR
        VPCCIDR:
          Ref: VPCCIDR
  BastionEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
      SubnetId:
        'Fn::GetAtt':
          - VPCStack
          - Outputs.PublicSubnet1ID
      Tags:
        - Key: Name
          Value: hello
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash

          sudo yum install -y
          https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        'Fn::GetAtt':
          - VPCStack
          - Outputs.VPCID
      GroupName: BastionSecurityGroup
      GroupDescription: Bastion host access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  SsmEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt SsmSecurityGroup.GroupId
      SubnetId:
        'Fn::GetAtt':
          - VPCStack
          - Outputs.PrivateSubnet1AID
      Tags:
        - Key: Name
          Value: hello
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash

          sudo yum install -y
          https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
  SsmSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        'Fn::GetAtt':
          - VPCStack
          - Outputs.VPCID
      GroupName: SsmSecurityGroup
      GroupDescription: Ssm remote host access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  RDSDbInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      DBName: postgres
      Engine: postgres
      MasterUsername:
        Ref: DBUser
      MasterUserPassword:
        Ref: DBPassword
      VPCSecurityGroups:
        - !GetAtt DbSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DbSubnetGroup
  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for postgres
      DBSubnetGroupName: DbSubnetGroup
      SubnetIds:
        - 'Fn::GetAtt':
            - VPCStack
            - Outputs.PrivateSubnet1AID
        - 'Fn::GetAtt':
            - VPCStack
            - Outputs.PrivateSubnet2AID
  DbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        'Fn::GetAtt':
          - VPCStack
          - Outputs.VPCID
      GroupName: DbSecurityGroup
      GroupDescription: Ssm demo database access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: SsmSecurityGroup
Outputs:
  BastionEC2Instance:
    Description: The instance ID of the bastion instance.
    Value: !Ref BastionEC2Instance
  SsmEC2Instance:
    Description: The instance ID of the demo instance.
    Value: !Ref SsmEC2Instance
